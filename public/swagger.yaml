swagger: "2.0"
info:
  description: "Trabalho Final NODE JS - Pós-Graduação em Desenvolvimento Mobile - PUC MINAS"
  version: "1.0.0"
  title: "Serviço PET"
host: "appnodejs-trabalhofinal.herokuapp.com"

basePath: "/"
tags:
- name: "pets"
  description: "Tudo sobre seus animais de estimação"
- name: "serviços"
  description: "Tudo sobre seus serviços"
- name: "ordens de serviço"
  description: "Tudo sobre as suas ordens de serviço"
- name: "user"
  description: "Login/Register"

schemes:
- "https"

paths:
  /api/pets:
    post:
      tags:
      - "pets"
      summary: "Adicionar novo Pet"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "O Pet precisa ser adicionando."
        required: true
        schema:
          $ref: "#/definitions/PetSemId"
      responses:
        "404":
          description: "Pet não incluído"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/CreatePetResponse"
      security:
      - api_key: []
    get:
      tags:
      - "pets"
      summary: "Retornar todos os Pets"
      description: "Retorna todos os Pets"
      operationId: "getPets"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "500":
          description: "Erro ao obter lista de pets"
      security:
      - api_key: []
  /api/pets/{petId}:
    get:
      tags:
      - "pets"
      summary: "Procurar Pet por ID"
      description: "Retorna um Pet"
      operationId: "getPetById"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID do Pet"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/Pet"
        "404":
          description: "Pet não encontrado"
      security:
      - api_key: []
    put:
      tags:
      - "pets"
      summary: "Atualizar dados do Pet"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID do Pet que precisa ser atualizado."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Pet que precisa ser atualizado no banco de dados"
        required: true
        schema:
          $ref: "#/definitions/PetSemId"
      responses:
        "404":
          description: "Pet not found"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/DeletePetResponse"
      security:
      - api_key: []
    delete:
      tags:
      - "pets"
      summary: "Remover um pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "Pet removido"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "404":
          description: "Pet não encontrado"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/DeletePetResponse"
      security:
      - api_key: []
      
  /api/servicos:
    get:
      tags:
      - "serviços"
      summary: "Retorna todos os serviços"
      description: "Retorna todos os serviços"
      operationId: "getServicos"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Servico"
        "500":
          description: "Erro ao obter lista de serviços"
      security:
      - api_key: []
    post:
      tags:
      - "serviços"
      summary: "Adicione um novo servico"
      description: ""
      operationId: "addServico"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto serviço a ser adiciondo"
        required: true
        schema:
          $ref: "#/definitions/ServicoSemId"
      responses:
        "404":
          description: "Serviço não incluído"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/CreatePetResponse"
      security:
      - api_key: []
      
  /api/servicos/{servicoId}:
    get:
      tags:
      - "serviços"
      summary: "Encontrar serviço por id"
      description: "Retorna um único serviço"
      operationId: "getServicoById"
      produces:
      - "application/json"
      parameters:
      - name: "servicoId"
        in: "path"
        description: "ID do serviço a ser retornado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/Servico"
        "404":
          description: "Serviço não encontrado"
      security:
      - api_key: []
    put:
      tags:
      - "serviços"
      summary: "Altera os dados do serviço"
      description: ""
      operationId: "updateServico"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "servicoId"
        in: "path"
        description: "ID do serviço a ser alterado"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Objeto serviço com dados que serão alterados"
        required: true
        schema:
          $ref: "#/definitions/ServicoSemId"
      responses:
        "404":
          description: "Serviço não encontrado"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/DeletePetResponse"
      security:
      - api_key: []
    delete:
      tags:
      - "serviços"
      summary: "Remove um serviço"
      description: ""
      operationId: "deleteServiço"
      produces:
      - "application/json"
      parameters:
      - name: "servicoId"
        in: "path"
        description: "ID do serviço a ser deletado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "404":
          description: "Serviço não encontrado"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/DeletePetResponse"
      security:
      - api_key: []
      
  /api/os:
    get:
      tags:
      - "ordens de serviço"
      summary: "Retorna todas as ordens de serviços"
      description: "Retorna todas as ordens de serviços"
      operationId: "getOrdens"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrdemServico"
        "500":
          description: "Erro ao obter lista de ordens"
      security:
      - api_key: []
    post:
      tags:
      - "ordens de serviço"
      summary: "Adicione uma nova ordem de serviço"
      description: ""
      operationId: "addOrdemServico"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto ordem de serviço a ser adiciondo"
        required: true
        schema:
          $ref: "#/definitions/OrdemServicoSemId"
      responses:
        "404":
          description: "Serviço não incluído"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/CreatePetResponse"
      security:
      - api_key: []
      
  /api/os/{ordemServicoId}:
    get:
      tags:
      - "ordens de serviço"
      summary: "Encontrar ordem por id"
      description: "Retorna uma única ordem"
      operationId: "getOrdemServicoById"
      produces:
      - "application/json"
      parameters:
      - name: "ordemServicoId"
        in: "path"
        description: "ID do serviço a ser retornado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/OrdemServico"
        "404":
          description: "Ordem não encontrada"
      security:
      - api_key: []
    put:
      tags:
      - "ordens de serviço"
      summary: "Altera os dados da ordem de serviço"
      description: ""
      operationId: "updateOrdemServico"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ordemServicoId"
        in: "path"
        description: "ID da ordem de serviço a ser alterado"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Objeto da ordem de serviço com dados que serão alterados"
        required: true
        schema:
          $ref: "#/definitions/OrdemServicoSemId"
      responses:
        "404":
          description: "Serviço não encontrado"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/DeletePetResponse"
      security:
      - api_key: []
    delete:
      tags:
      - "ordens de serviço"
      summary: "Remove uma ordem de serviço"
      description: ""
      operationId: "deleteOrdemServiço"
      produces:
      - "application/json"
      parameters:
      - name: "ordemServicoId"
        in: "path"
        description: "ID da ordem de serviço a ser deletado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "404":
          description: "Ordem de Serviço não encontrado"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/DeletePetResponse"
      security:
      - api_key: []

  /seguranca/login:
    post:
      tags:
      - "user"
      summary: "Entrar com Usuário"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that is going to be authenticated"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/LoginResponse"
  /seguranca/register:
    post:
      tags:
      - "user"
      summary: "Registrar Usuário"
      description: ""
      operationId: "register"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that is going to be created"
        required: true
        schema:
          $ref: "#/definitions/Register"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/RegisterResponse"


securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  Login:
    type: "object"
    properties:
      login:
        type: "string"
      senha:
        type: "string"
    xml:
      name: "Login"
  LoginResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      login:
        type: "string"
      nome:
        type: "string"
      roles:
        type: "string"       
      token:
        type: "string"
        sumary: "Beare <Token JWT>"        
    xml:
      name: "LoginResponse"
  Register:
    type: "object"
    properties:
      login:
        type: "string"
      email:
        type: "string"
      nome:
        type: "string"
      senha:
        type: "string"
    xml:
      name: "Register"
  RegisterResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      nome:
        type: "string"
      email:
        type: "string"
      login:
        type: "string"
      roles:
        type: "string"
    xml:
      name: "RegisterResponse"
  Pet:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      nome:
        type: "string"
        example: "Rex"
      raca:
        type: "string"
        example: "Labrador"
      idade:
        type: "integer"
        format: "int64"
        example: 10
      peso:
        type: "integer"
        format: "int64"
        example: 35
      tutor:
        type: "string"
        example: "Fred Andrade"
    xml:
      name: "Pet"
  PetSemId:
    type: "object"
    properties:
      nome:
        type: "string"
        example: "Rex"
      raca:
        type: "string"
        example: "Labrador"
      idade:
        type: "integer"
        format: "int64"
        example: 10
      peso:
        type: "integer"
        format: "int64"
        example: 35
      tutor:
        type: "string"
        example: "Fred Andrade"
    xml:
      name: "PetSemId"
  CreatePetResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      message:
        type: "string"
        example: "Item incluído com sucesso"
    xml:
      name: "CreatePetResponse"
  DeletePetResponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Item removido com sucesso"
    xml:
      name: "CreatePetResponse"
  Servico:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      tipo_servico:
        type: "string"
        example: "Tosa"
      valor_servico:
        type: "integer"
        format: "int64"
    xml:
      name: "Servico"
  ServicoSemId:
    type: "object"
    properties:
      tipo_servico:
        type: "string"
        example: "Tosa"
      valor_servico:
        type: "integer"
        format: "int64"
    xml:
      name: "Servico"
  OrdemServico:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      data_servico:
        type: "string"
        example: "2022-07-04T00:00:00.000Z"
      id_pet:
        type: "integer"
        format: "int64"
      id_servico:
        type: "integer"
        format: "int64"
      quantidade_servico:
        type: "integer"
        format: "int64"
      observacao:
        type: "string"
        example: "Cachorro bravo"
    xml:
      name: "OrdemServico"
  OrdemServicoSemId:
    type: "object"
    properties:
      data_servico:
        type: "string"
        example: "2022-07-04T00:00:00.000Z"
      id_pet:
        type: "integer"
        format: "int64"
      id_servico:
        type: "integer"
        format: "int64"
      quantidade_servico:
        type: "integer"
        format: "int64"
      observacao:
        type: "string"
        example: "Cachorro bravo"
    xml:
      name: "OrdemServico"
externalDocs:
  description: "Desenvolvimento Colaborativo: Ana Letícia, Frederico Andrade e Tamára Salvatori."
  url: "https://github.com/FredVieiraAndrade/TrabalhoFinalNodeJs"